import type { DataCaptureOverlay, DataCaptureView, BrushJSON, Optional } from "scandit-web-datacapture-core";
import { Brush } from "scandit-web-datacapture-core";
import type { Serializable } from "scandit-web-datacapture-core/build/js/private/Serializable";
import type { BarcodeTracking } from "./BarcodeTracking";
import type { TrackedBarcode } from "./TrackedBarcode";
export interface BarcodeTrackingBasicOverlayListener {
    brushForTrackedBarcode?(overlay: BarcodeTrackingBasicOverlay, trackedBarcode: TrackedBarcode): Optional<Brush>;
    didTapTrackedBarcode?(overlay: BarcodeTrackingBasicOverlay, trackedBarcode: TrackedBarcode): void;
}
export declare enum BarcodeTrackingBasicOverlayStyle {
    Frame = "frame",
    Dot = "dot",
    Legacy = "legacy"
}
export interface BarcodeTrackingBasicOverlayJSON {
    type: "barcodeTrackingBasic";
    style: BarcodeTrackingBasicOverlayStyle;
    shouldShowScanAreaGuides: boolean;
    brush: BrushJSON;
    brushesForBarcodes: Record<string, BrushJSON>;
}
export declare class BarcodeTrackingBasicOverlay implements DataCaptureOverlay, Serializable<BarcodeTrackingBasicOverlayJSON> {
    private _listener;
    private privateListener;
    private readonly type;
    private _style;
    private barcodeTracking;
    private _shouldShowScanAreaGuides;
    private _brush;
    private _brushesForBarcodes;
    get style(): BarcodeTrackingBasicOverlayStyle;
    get listener(): Optional<BarcodeTrackingBasicOverlayListener>;
    set listener(listener: Optional<BarcodeTrackingBasicOverlayListener>);
    get brush(): Brush;
    static withBarcodeTracking(barcodeTracking: BarcodeTracking): Promise<BarcodeTrackingBasicOverlay>;
    static withBarcodeTrackingForView(barcodeTracking: BarcodeTracking, view: Optional<DataCaptureView>): Promise<BarcodeTrackingBasicOverlay>;
    static withBarcodeTrackingForViewWithStyle(barcodeTracking: BarcodeTracking, view: Optional<DataCaptureView>, style: BarcodeTrackingBasicOverlayStyle): Promise<BarcodeTrackingBasicOverlay>;
    setBrush(brush: Brush): Promise<void>;
    shouldShowScanAreaGuides(): boolean;
    setShouldShowScanAreaGuides(shouldShowScanAreaGuides: boolean): Promise<void>;
    setBrushForTrackedBarcode(brush: Brush, trackedBarcode: TrackedBarcode): Promise<void>;
    clearTrackedBarcodeBrushes(): Promise<void>;
    toJSONObject(): BarcodeTrackingBasicOverlayJSON;
}
