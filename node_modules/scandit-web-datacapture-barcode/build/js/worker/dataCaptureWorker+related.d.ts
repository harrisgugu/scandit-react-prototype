import type { PrivateLoadableFrameData } from "scandit-web-datacapture-core";
import type { AnyDataCaptureActionMessage as CoreAnyDataCaptureActionMessage, DataCaptureActionMessageKey as CoreDataCaptureActionMessageKey, DataCaptureCallbackMessageKeys as CoreDataCaptureCallbackMessageKeys, DataCaptureCallbackMessage as CoreDataCaptureCallbackMessage, CaptureModeDeserializerInstance, JSONParseable, Module as CoreModule, DataCaptureContext, WorkerResponse as CoreWorkerResponse, WasmFrameData, EmscriptenClassHandle } from "scandit-web-datacapture-core/build/js/worker";
import type { Symbology } from "../Barcode";
import type { BarcodeCaptureSessionJSON } from "../BarcodeCaptureSession";
import type { BarcodeTrackingSessionJSON } from "../BarcodeTrackingSession";
import type { TrackedBarcodeJSON } from "../TrackedBarcode";
/**
 * MESSAGES (ACTIONS) SENT TO THE WORKER
 */
export declare type DataCaptureActionMessageKey = CoreDataCaptureActionMessageKey | "createBlurryTable";
export declare type WorkerResponse<C extends DataCaptureActionMessageKey> = CoreWorkerResponse<C>;
interface DataCaptureActionMessage {
    command: DataCaptureActionMessageKey;
    id: number;
}
export interface CreateBlurryTableDataCaptureAction extends DataCaptureActionMessage {
    command: "createBlurryTable";
    symbology: Symbology;
}
export declare type AnyDataCaptureActionMessage = CoreAnyDataCaptureActionMessage | CreateBlurryTableDataCaptureAction;
/**
 * MESSAGES EMITTED BY THE WORKER
 */
declare type DataCaptureCallbackMessageKeys = CoreDataCaptureCallbackMessageKeys | "barcodeCaptureDidScan" | "barcodeCaptureDidUpdateSession" | "barcodeTrackingDidUpdateSession" | "createBlurryTableResult" | "didTapTrackedBarcode";
interface BaseDataCaptureCallbackMessage {
    type: DataCaptureCallbackMessageKeys;
}
export interface BarcodeCaptureDidScanWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "barcodeCaptureDidScan";
    payload: {
        session: BarcodeCaptureSessionJSON;
        frameData: PrivateLoadableFrameData;
    };
}
export interface BarcodeCaptureDidUpdateSessionWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "barcodeCaptureDidUpdateSession";
    payload: BarcodeCaptureSessionJSON;
}
export interface BarcodeTrackingDidTapTrackedBarcode extends BaseDataCaptureCallbackMessage {
    type: "didTapTrackedBarcode";
    payload: TrackedBarcodeJSON;
}
interface BarcodeTrackingDidUpdateSessionWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "barcodeTrackingDidUpdateSession";
    payload: BarcodeTrackingSessionJSON;
}
interface CreateBlurryTableResultWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "createBlurryTableResult";
    payload: {
        symbology: Symbology;
    };
}
export declare type DataCaptureCallbackMessage = BarcodeCaptureDidScanWorkerMessage | BarcodeCaptureDidUpdateSessionWorkerMessage | BarcodeTrackingDidTapTrackedBarcode | BarcodeTrackingDidUpdateSessionWorkerMessage | CoreDataCaptureCallbackMessage | CreateBlurryTableResultWorkerMessage;
/**
 * OTHERS
 */
export declare type PayloadForCommand<A, C> = A extends {
    command: C;
} ? A : never;
export interface DataCaptureWorker extends Omit<Worker, "postMessage"> {
    onmessage: ((this: Worker, event_: MessageEvent & {
        data: any;
    }) => void) | null;
    postMessage: <C extends AnyDataCaptureActionMessage["command"]>(message: PayloadForCommand<AnyDataCaptureActionMessage, C>, transfer?: Transferable[]) => void;
}
export interface BarcodeCaptureModule extends CoreModule {
    BarcodeCaptureDeserializer: new () => CaptureModeDeserializerInstance;
    BarcodeCaptureListener: {
        extend: (target: "BarcodeCaptureListener", parameters: {
            didScan: (barcode_capture: any, session: JSONParseable, frame_data: WasmFrameData) => void;
            didUpdateSession: (barcode_capture: any, session: JSONParseable, frame_data: any) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BarcodeCaptureDeserializerListener: {
        extend: (target: "BarcodeCaptureDeserializerListener", parameters: {
            onModeDeserializationStarted: (deserializer: any, mode: any, json: JSONParseable) => void;
            onModeDeserializationFinished: (deserializer: any, mode: any, json: JSONParseable) => void;
            onSettingsDeserializationStarted: (deserializer: any, settings: any, json: JSONParseable) => void;
            onSettingsDeserializationFinished: (deserializer: any, settings: any, json: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BarcodeTrackingDeserializer: new () => CaptureModeDeserializerInstance;
    BarcodeTrackingListener: {
        extend: (target: "BarcodeTrackingListener", parameters: {
            didUpdateSession: (barcode_tracking: any, session: JSONParseable, frame_data: any) => void;
            onTrackedBarcodeTapped: (barcode_tracking: any, tracked_barcode: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BarcodeTrackingDeserializerListener: {
        extend: (target: "BarcodeTrackingDeserializerListener", parameters: {
            onModeDeserializationStarted: (deserializer: any, mode: any, json: JSONParseable) => void;
            onModeDeserializationFinished: (deserializer: any, mode: any, json: JSONParseable) => void;
            onSettingsDeserializationStarted: (deserializer: any, settings: any, json: JSONParseable) => void;
            onSettingsDeserializationFinished: (deserializer: any, settings: any, json: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BlurryTableCreator: {
        createTables: (context: DataCaptureContext, symbology: Symbology) => void;
    };
    LicenseUtils: {
        getBlinkIdLicenseKey: (scanditLicense: string) => string;
    };
}
export interface Module extends CoreModule, BarcodeCaptureModule {
}
export {};
