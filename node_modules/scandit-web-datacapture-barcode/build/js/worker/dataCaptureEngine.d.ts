import type { ModuleHandler, Vector, WorkerFunctions as BaseWorkerFunctions } from "scandit-web-datacapture-core/build/js/worker";
import { DataCaptureEngine as CoreDataCaptureEngine } from "scandit-web-datacapture-core/build/js/worker";
import type { Symbology } from "../Barcode";
import { BarcodeCaptureMode } from "./BarcodeCaptureMode";
import { BarcodeTrackingMode } from "./BarcodeTrackingMode";
import type { EngineWorkerResponse } from "./dataCapture.worker";
import type { BarcodeCaptureModule as Module, DataCaptureCallbackMessage } from "./dataCaptureWorker+related";
export interface WorkerFunctions extends BaseWorkerFunctions {
    postMessage: (message: DataCaptureCallbackMessage, transfer?: Transferable[]) => void;
}
/**
 * DataCaptureEngine is an abstraction of the engine, it is created by the engine worker
 * and should be used as a singleton. It calls the underlying engine methods directly.
 */
export declare class DataCaptureEngine extends CoreDataCaptureEngine<Module> {
    protected barcodeCaptureMode: BarcodeCaptureMode;
    protected barcodeTrackingMode: BarcodeTrackingMode;
    protected workerFunctions: WorkerFunctions;
    constructor(moduleHandler: ModuleHandler<Module>, workerFunctions: WorkerFunctions);
    createBlurryTable(symbology: Symbology): EngineWorkerResponse<"createBlurryTable">;
    getModeDeserializers(): Vector;
    protected getWasmSideModuleFileName(): string;
    protected getWasmCoreFileName(simdSupport: boolean, multithreadSupport: boolean): string;
    protected getWasmCoreExpectedHash(simdSupport: boolean, multithreadSupport: boolean): string;
    protected getWasmMetadata(): Record<string, {
        bytes: number;
    }>;
}
