import type { DataCaptureContext, DataCaptureMode, DataCaptureModeJSON, PrivateDataCaptureMode } from "scandit-web-datacapture-core";
import { CameraSettings } from "scandit-web-datacapture-core";
import type { Serializable } from "scandit-web-datacapture-core/build/js/private/Serializable";
import { BarcodeTrackingSession } from "./BarcodeTrackingSession";
import type { BarcodeTrackingSettings, BarcodeTrackingSettingsJSON } from "./BarcodeTrackingSettings";
import type { PrivateBarcodeTrackingListener } from "./PrivateBarcodeTrackingBasicOverlayListener";
export interface PrivateBarcodeTracking extends PrivateDataCaptureMode {
    notifyContext: () => Promise<void>;
    addPrivateListener(listener: PrivateBarcodeTrackingListener): void;
}
export interface BarcodeTrackingListener {
    didUpdateSession?(barcodeTracking: BarcodeTracking, session: BarcodeTrackingSession): void;
}
declare type BarcodeTrackingJSON = DataCaptureModeJSON<BarcodeTrackingSettingsJSON>;
export declare class BarcodeTracking implements DataCaptureMode, Serializable<BarcodeTrackingJSON> {
    private readonly type;
    private _isEnabled;
    private settings;
    private _context;
    private readonly listeners;
    private readonly privateListeners;
    private readonly workerMessageListener;
    static get recommendedCameraSettings(): CameraSettings;
    get context(): DataCaptureContext | null;
    private set context(value);
    static forContext(context: DataCaptureContext | null, settings: BarcodeTrackingSettings): Promise<BarcodeTracking>;
    isEnabled(): boolean;
    setEnabled(enabled: boolean): Promise<void>;
    applySettings(settings: BarcodeTrackingSettings): Promise<void>;
    addListener(listener: BarcodeTrackingListener): void;
    removeListener(listener: BarcodeTrackingListener): void;
    toJSONObject(): BarcodeTrackingJSON;
    private attachedToContext;
    private detachedFromContext;
    private addPrivateListener;
    private removePrivateListener;
    private onWorkerMessage;
    private notifyContext;
}
export {};
