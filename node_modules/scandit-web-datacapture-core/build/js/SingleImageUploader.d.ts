import type { FrameSource, FrameSourceJSON, FrameSourceListener } from "./Camera+Related";
import { FrameSourceState } from "./Camera+Related";
import type { SingleImageUploaderSettingsJSON } from "./SingleImageUploader+Related";
import { SingleImageUploaderSettings } from "./SingleImageUploader+Related";
import type { Serializable } from "./private/Serializable";
export interface SingleImageUploaderJSON extends FrameSourceJSON {
    type: "singleImageUploader";
    settings: Record<string, never> | SingleImageUploaderSettingsJSON;
    desiredState: FrameSourceState;
}
export declare type SingleImageUploaderType = "singleImageUploader";
export declare class SingleImageUploader implements FrameSource, Serializable<SingleImageUploaderJSON> {
    private readonly type;
    private _currentState;
    private _settings;
    private _desiredState;
    private readonly listeners;
    private _context;
    private _view;
    static get default(): SingleImageUploader;
    get desiredState(): FrameSourceState;
    get settings(): SingleImageUploaderSettings;
    private get context();
    private set context(value);
    private set currentState(value);
    private get currentState();
    switchToDesiredState(state: FrameSourceState): Promise<void>;
    private setCurrentState;
    addListener(listener: FrameSourceListener | null): void;
    removeListener(listener: FrameSourceListener | null): void;
    applySettings(settings: SingleImageUploaderSettings): Promise<void>;
    toJSONObject(): SingleImageUploaderJSON;
    getCurrentState(): FrameSourceState;
    getLastUploadedImage(): ImageData | null;
    private notifyContext;
    private notifyListeners;
    private processUploadedFileCapture;
    private addView;
}
